class SetenvUtil():
  import yaml
  import json
  import os
  def __init__(self,setup=None,ignore=['readme','json'],pre_env='SETUP_'):
    '''
    Read metadata from a yml
    - write to json
    - print bash env commands
    
    yaml file must be specified in setup['meta']
    
    data stored in dictionary available in self.setup
    
    keywords:
      setup=None  : initial dictionary
      ignore=None : list of items to ignore on printing env
    
    methods:
    
      load()          : load yml from setup['meta']
      dump_dict()     : return dict
      dump_env()      : print oubash envs
      dump_json(file) : dump to json or print
      info()          : pretty print of info
    '''
    self.ignore = ignore
    self.pre_env = pre_env
    self.setup = setup or {
      'readme'  : 'This is autogenerated by setup.py: do not edit this file directly',
       'url'     : 'https://github.com/profLewis/uclgeog',
       'version' : '1.0.11',
       'meta'    : 'meta.yaml', 
       'name'    : 'uclgeog',
       'json'    : 'setup_info.json'
    }
    
  def load(self):
    info = {}
    if 'meta' in self.setup:
      try:
        with open(self.setup['meta'],'r') as f:
          info = yaml.safe_load(f);
        self.setup.update(info)
        return(self.setup)
      except:
        return None
    return None
  
  def dump_dict(self):
    return(self.setup)
    
  def dump_env(self):
    '''
    print bash senetnv commands
    
    assumes information only 1 level deep
    
    keys in self.ignore are ignored.
    '''
    for i in self.setup.keys():
      n_i = self.setup[i];
      if ( i not in self.ignore):
        print(f'export {self.pre_env}{i}={n_i}');
        
  def info(self):
    print('-'*40)
    print(self.setup)
    print('-'*40)

  def dump_json(self):
    try:
      filename = self.json
      with open(filename, 'w') as fp:
        json.dump(self.setup, fp)
      return filename
    except:
      pass
    return None

